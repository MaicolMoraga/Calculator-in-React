{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","_this","Object","C_Users_morag_Desktop_Git_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_morag_Desktop_Git_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_morag_Desktop_Git_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","display","initialValue","length","equation","listButtons","evaluateColors","bind","C_Users_morag_Desktop_Git_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","evaluateGrid","buttonClick","item","signs","valDisplay","valEquation","last","substr","indexOf","eval","str","toString","result","Math","round","array","split","fix","toFixed","isNaN","minusLast","substring","setState","nameClase","_this2","arrayButtons","map","i","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_8__","key","xs","sm","md","className","reactstrap__WEBPACK_IMPORTED_MODULE_9__","id","value","size","color","onClick","reactstrap__WEBPACK_IMPORTED_MODULE_10__","body","outline","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","Component","App","react_default","Container","Row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m0DAMMA,gCACF,SAAAA,WAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,4JAAA,EAAAD,CAAAE,KAAAL,aACdE,EAAAC,OAAAG,uKAAA,EAAAH,CAAAE,KAAAF,OAAAI,4JAAA,EAAAJ,CAAAH,YAAAQ,KAAAH,QACKI,MAAQ,CACTC,QAAST,EAAMU,aAAaC,OAAO,EAAEX,EAAMU,aAAa,EACxDE,SAAS,GACTC,+DAGJZ,EAAKa,eAAiBb,EAAKa,eAAeC,KAApBb,OAAAc,mKAAA,EAAAd,QAAAc,mKAAA,EAAAd,CAAAD,KACtBA,EAAKgB,aAAiBhB,EAAKgB,aAAaF,KAAlBb,OAAAc,mKAAA,EAAAd,QAAAc,mKAAA,EAAAd,CAAAD,KACtBA,EAAKiB,YAAiBjB,EAAKiB,YAAYH,KAAjBb,OAAAc,mKAAA,EAAAd,QAAAc,mKAAA,EAAAd,CAAAD,KAVRA,6ZAgBJkB,MAGV,IAAIC,MAAc,CAAC,IAAK,IAAK,IAAK,IAAI,KAClCC,WAAc,EACdC,YAAc,GACdC,KAAcnB,KAAKI,MAAMI,SAASY,QAAQ,GAE9C,GAAY,MAATL,MAGC,GAAIf,KAAKI,MAAMI,SAASD,OAAS,IAAgC,IAAzBS,MAAMK,QAAQF,MAAc,CAChEF,WAAcK,KAAKtB,KAAKI,MAAMI,UAC9BU,YAAclB,KAAKI,MAAMI,SAEzB,IAAIe,IAAMN,WAAWO,WAErB,GAAIP,WAAW,EAAI,GAAOM,IAAIhB,QAAU,GAAK,CACzC,IAAIkB,QAAYC,KAAKC,MAAoB,IAAbV,YAAqB,KAAKO,WAClDI,MAAUH,OAAOI,MAAM,KACvBC,IAAUF,MAAM,GAAGrB,OAAO,EAAGqB,MAAM,GAAGrB,OAAS,EAAEqB,MAAM,GAAGrB,OAC9DU,WAAcA,WAAWc,QAAQD,YAKzC,GAA2B,IAAvB9B,KAAKI,MAAMC,SAAkD,IAA/BL,KAAKI,MAAMI,SAASD,OAG9CyB,MAAMjB,OAAkB,MAATA,OACfG,YAAclB,KAAKI,MAAMI,SAASO,WAItC,GAAGC,MAAMK,QAAQN,OAAS,EAGtB,GAAGC,MAAMK,QAAQF,OAAS,EAAE,CACxB,IAAIc,UAAYjC,KAAKI,MAAMI,SAAS0B,UAAU,EAAGlC,KAAKI,MAAMI,SAASD,OAAQ,GAC7EW,YAAce,UAAUlB,UAKpBG,YADDlB,KAAKI,MAAMC,QAAU,EACNL,KAAKI,MAAMC,QAAQU,KAEnBf,KAAKI,MAAMI,SAASO,UAMtCiB,MAAMjB,QAIFG,YADDlB,KAAKI,MAAMC,QAAU,EACNL,KAAKI,MAAMC,QAAQU,KAEnBf,KAAKI,MAAMI,SAASO,MAQtDf,KAAKmC,SAAS,CACV9B,QAASY,WACTT,SAAUU,qDAMDH,GAcb,MAZgB,CAAC,IAAK,IAAK,IAAK,KAEvBM,QAAQN,IAAS,EACX,UACG,MAATA,EACM,UACG,OAATA,EACM,SAEA,oDAOJA,GACX,IAAIqB,EAAY,YAMhB,MAJY,MAATrB,IACCqB,EAAU,aAGPA,mCAGH,IAAAC,EAAArC,KAEEsC,EAAetC,KAAKI,MAAMK,YAAY8B,IACxC,SAAC9B,EAAY+B,GACX,OACEC,2CAAAC,EAAAC,cAACC,wCAAA,EAAD,CAAKC,IAAKL,EAAGM,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,UAAU,YAC1CR,2CAAAC,EAAAC,cAACO,wCAAA,EAAD,CAAQC,GAAI1C,EAAY0C,GAAIC,MAAO3C,EAAY2C,MAAOC,KAAK,KAAKC,MAAOjB,EAAK3B,eAAeD,EAAY2C,OAAQH,UAAWZ,EAAKxB,aAAaJ,EAAY2C,OAAQG,QAASlB,EAAKvB,YAAYH,KAAK0B,EAAK5B,EAAY2C,QAC7M3C,EAAYJ,YAQzB,OACIoC,2CAAAC,EAAAC,cAACC,wCAAA,EAAD,CAAKE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACpBP,2CAAAC,EAAAC,cAACa,yCAAA,EAAD,CAAMP,UAAU,OAAOQ,MAAI,EAACC,SAAO,EAACJ,MAAM,WAC1Cb,2CAAAC,EAAAC,cAACgB,yCAAA,EAAD,KACIlB,2CAAAC,EAAAC,cAACC,wCAAA,EAAD,CAAKO,GAAG,OAAOL,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,UAAU,QACjDR,2CAAAC,EAAAC,cAAA,QAAMQ,GAAG,MACJnD,KAAKI,MAAMI,UAEhBiC,2CAAAC,EAAAC,cAAA,QAAMQ,GAAG,OACJnD,KAAKI,MAAMC,UAGhBoC,2CAAAC,EAAAC,cAACiB,yCAAA,EAAD,CAAKX,UAAU,OACdX,sBAnJIuB,8CA4JVlE,29BCjJAmE,mLAVX,OACEC,EAAArB,EAAAC,cAACqB,EAAA,EAAD,CAAWf,UAAU,OACnBc,EAAArB,EAAAC,cAACsB,EAAA,EAAD,CAAKhB,UAAU,kCACbc,EAAArB,EAAAC,cAAChD,EAAA,EAAD,CAAYW,aAAe,cALnBuD,aCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OACPT,EAAArB,EAAAC,cAACoB,EAAArB,EAAM+B,WAAP,KACEV,EAAArB,EAAAC,cAAC+B,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.46cba4dd.chunk.js","sourcesContent":["/*eslint-disable no-eval */\r\n\r\nimport React, { Component } from 'react';\r\nimport {listButtons} from '../json/Buttons.json';\r\nimport { Col, Card, CardBody, Row, Button } from 'reactstrap';\r\n\r\nclass Calculator extends Component{\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            display: props.initialValue.length>0?props.initialValue:0,\r\n            equation:\"\",\r\n            listButtons\r\n        }\r\n\r\n        this.evaluateColors = this.evaluateColors.bind(this);\r\n        this.evaluateGrid   = this.evaluateGrid.bind(this);\r\n        this.buttonClick    = this.buttonClick.bind(this);\r\n\r\n      }\r\n\r\n      /*Function that is executed when pressing a button, \r\n      which evaluates whether to add a value to the equation, clean the display or deliver the result. */\r\n      buttonClick(item){\r\n        /*The initial value and equation are declared, in addition to the signs that allow an equation to be made, \r\n        in case of pressing \"AC\" the states are updated by the declared initial values.*/\r\n        var signs       = ['+', '-', '*', '/','.'];\r\n        var valDisplay  = 0;\r\n        var valEquation = '';\r\n        var last        = this.state.equation.substr(-1);\r\n\r\n        if(item === '='){\r\n            /*In case of pressing the equal button, it is evaluated that an equation equals and \r\n            that the equation is written correctly.*/\r\n            if((this.state.equation.length > 0) && (signs.indexOf(last) === -1)){\r\n                valDisplay  = eval(this.state.equation);\r\n                valEquation = this.state.equation;\r\n                /*If the result contains too large a decimal number, they are limited of characters.*/\r\n                var str = valDisplay.toString();\r\n\r\n                if((valDisplay%1 > 0) && (str.length >= 10 )){\r\n                    var result  =  (Math.round( valDisplay * 100 ) / 100).toString();\r\n                    var array   = result.split('.');\r\n                    var fix     = array[0].length>8?(array[0].length):(9-array[0].length)\r\n                    valDisplay  = valDisplay.toFixed(fix);\r\n                }\r\n            }\r\n        }else{\r\n            /*The initial value is evaluated as zero and there is no generated equation.*/\r\n            if((this.state.display === 0) && (this.state.equation.length === 0)){\r\n                /*It is evaluated that the pressed button corresponds to a number or to the operator \"minus\" to enter a negative number, \r\n                otherwise it does not allow starting an equation with an operator.*/\r\n                if(!isNaN(item) || item === '-'){\r\n                    valEquation = this.state.equation+item\r\n                }\r\n            }else{\r\n                /*The pressed button is evaluated as an operator.*/\r\n                if(signs.indexOf(item) > -1){\r\n                    /*It is evaluated that the last character of the equation is not an operator, \r\n                    otherwise it replaces it with the new operator.*/\r\n                    if(signs.indexOf(last) > -1){\r\n                        var minusLast = this.state.equation.substring(0, this.state.equation.length -1);\r\n                        valEquation = minusLast+item\r\n                    }else{\r\n                        /*If there is an initial number, it is generated with an equation with said value plus the pressed operator, otherwise, \r\n                        the operator is added to the existing equation.*/\r\n                        if(this.state.display > 0){\r\n                            valEquation = this.state.display+item\r\n                        }else{\r\n                            valEquation = this.state.equation+item\r\n                        }\r\n                    }\r\n\r\n                }else{\r\n                    /*It is evaluated that the button pressed is a number, in case there is an initial number.*/\r\n                    if(!isNaN(item)){\r\n                        /*In case there is an initial number, the number pressed is added to it, \r\n                        otherwise it is added to the number already existing in the equation.*/\r\n                        if(this.state.display > 0){\r\n                            valEquation = this.state.display+item\r\n                        }else{\r\n                            valEquation = this.state.equation+item\r\n                        }\r\n                    }\r\n                }\r\n            } \r\n        }\r\n\r\n        /*Once the action performed by the pressed button is evaluated, the equation and the result are shown in the views.*/\r\n        this.setState({\r\n            display: valDisplay,\r\n            equation: valEquation\r\n        });\r\n        \r\n      }\r\n\r\n      /*Returns the color according to the type of button to use.*/\r\n      evaluateColors(item){\r\n        var nameClase = '';\r\n        var signs     = [\"+\", \"-\", \"*\", \"/\"];\r\n        \r\n        if(signs.indexOf(item) > -1){\r\n            nameClase ='warning';\r\n        }else if(item === '='){\r\n            nameClase ='primary';\r\n        }else if(item === 'AC'){\r\n            nameClase ='danger';\r\n        }else{\r\n            nameClase ='outline-dark';\r\n        }\r\n        \r\n        return nameClase;\r\n      }\r\n      \r\n      /*Returns the bootstrap class of the style you want to use according to the button.*/\r\n      evaluateGrid(item){\r\n        var nameClase = 'btn-block';\r\n  \r\n        if(item !== '='){\r\n            nameClase='btn-block';\r\n        }\r\n  \r\n        return nameClase;\r\n      }\r\n\r\n    render(){\r\n        /*Generate the buttons to use (numbers and operators) based on the Buttons.json file.*/\r\n        const arrayButtons = this.state.listButtons.map(\r\n            (listButtons,i) => {\r\n              return(\r\n                <Col key={i} xs={3} sm={3} md={3} className=\"mb-2 p-1\">\r\n                  <Button id={listButtons.id} value={listButtons.value} size=\"lg\" color={this.evaluateColors(listButtons.value)} className={this.evaluateGrid(listButtons.value)} onClick={this.buttonClick.bind(this,listButtons.value)}>\r\n                    {listButtons.display}\r\n                  </Button>\r\n                </Col>\r\n              )\r\n            }\r\n          );\r\n        /*Col id=\"View\": Section where the equation made and its result are shown.*/\r\n        /*Row: Section where the equation made and its result are shown.*/\r\n        return(\r\n            <Col xs={12} sm={6} md={4}>\r\n                <Card className=\"Card\" body outline color=\"primary\">\r\n                <CardBody>\r\n                    <Col id=\"view\" xs={12} sm={12} md={12} className=\"mb-2\">\r\n                    <span id=\"eq\">\r\n                        {this.state.equation}\r\n                    </span>\r\n                    <span id=\"dis\">\r\n                        {this.state.display}\r\n                    </span>\r\n                    </Col>\r\n                    <Row className=\"m-0\">\r\n                    {arrayButtons}\r\n                    </Row>\r\n                </CardBody>\r\n                </Card>\r\n            </Col>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {Row, Container} from 'reactstrap';\r\nimport Calculator from './components/Calculator';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container className=\"App\">\r\n        <Row className=\"justify-content-md-center mt-2\">\r\n          <Calculator initialValue = '' />\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}